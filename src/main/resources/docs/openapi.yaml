openapi: 3.0.3
info:
  title: Bank REST API
  description: REST API for banking system with card management and transfers
  version: 1.0.0
  contact:
    name: Bank API Team
    email: api@bank.com
  license:
    name: MIT License
servers:
  - url: http://localhost:8080
    description: Development server

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User authentication
      description: Login to the system with JWT token retrieval
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create new user with USER role
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationResponse'
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/register-admin:
    post:
      tags:
        - Authentication
      summary: Register administrator
      description: Create new user with ADMIN role
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: Successful administrator registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationResponse'
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/cards:
    post:
      tags:
        - Cards
      summary: Create new card
      description: Create new card (administrators only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '200':
          description: Card successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

    get:
      tags:
        - Cards
      summary: Get cards list with pagination
      description: Search and pagination of cards (administrators only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Field for sorting
          required: false
          schema:
            type: string
            default: id
        - name: sortDir
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: status
          in: query
          description: Filter by card status
          required: false
          schema:
            type: string
            enum: [ACTIVE, BLOCKED, EXPIRED]
        - name: ownerId
          in: query
          description: Filter by card owner
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Cards list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponse'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

  /api/cards/{id}:
    get:
      tags:
        - Cards
      summary: Get card information
      description: View information about specific card
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Card ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Card not found
        '401':
          description: Unauthorized

    delete:
      tags:
        - Cards
      summary: Delete card
      description: Delete card (administrators only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Card ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card successfully deleted
        '400':
          description: Deletion error
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Card not found

  /api/cards/{id}/block:
    put:
      tags:
        - Cards
      summary: Block card
      description: Block card (administrators only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Card ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card successfully blocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          description: Blocking error
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Card not found

  /api/cards/{id}/activate:
    put:
      tags:
        - Cards
      summary: Activate card
      description: Activate card (administrators only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Card ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card successfully activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          description: Activation error
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Card not found

  /api/transfer:
    post:
      tags:
        - Transfers
      summary: Transfer between cards
      description: Transfer funds between own cards (users only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Transfer completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Transfer execution error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username
          example: "testuser1"
        password:
          type: string
          format: password
          description: Password
          example: "password123"

    SignUpRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: Username
          example: "newuser"
        email:
          type: string
          format: email
          description: Email address
          example: "newuser@example.com"
        password:
          type: string
          format: password
          description: Password
          example: "password123"

    JwtAuthenticationResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        id:
          type: integer
          format: int64
          description: User ID
        username:
          type: string
          description: Username
        email:
          type: string
          description: User email
        role:
          type: string
          description: User role
          enum: [USER, ADMIN]

    CreateCardRequest:
      type: object
      required:
        - ownerId
        - initialBalance
      properties:
        ownerId:
          type: integer
          format: int64
          description: Card owner ID
          example: 1
        initialBalance:
          type: number
          format: decimal
          description: Initial card balance
          example: 1000.00

    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Card ID
        cardNumber:
          type: string
          description: Card number
          example: "1234567890123456"
        balance:
          type: number
          format: decimal
          description: Card balance
          example: 1500.50
        status:
          type: string
          description: Card status
          enum: [ACTIVE, BLOCKED, EXPIRED]
        ownerId:
          type: integer
          format: int64
          description: Card owner ID
        ownerUsername:
          type: string
          description: Card owner username
        createdAt:
          type: string
          format: date-time
          description: Card creation date
        expirationDate:
          type: string
          format: date
          description: Card expiration date

    TransferRequest:
      type: object
      required:
        - fromCardId
        - toCardId
        - amount
      properties:
        fromCardId:
          type: integer
          format: int64
          description: Sender card ID
          example: 1
        toCardId:
          type: integer
          format: int64
          description: Receiver card ID
          example: 2
        amount:
          type: number
          format: decimal
          description: Transfer amount
          example: 100.00

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Operation status
        message:
          type: string
          description: Result message

    PageCardResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponse'
        pageable:
          type: object
        last:
          type: boolean
        totalPages:
          type: integer
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
        number:
          type: integer
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
